<!-- через Binding подключаем свойство Title из MainWindowVM -->
<Window x:Class="MVVM_Test2.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MVVM_Test2"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:oxy="http://oxyplot.org/wpf"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="450" Width="1000">

    <!-- указываем DC для всего окна, все визуальные эл будут иметь тот же DC если внутри эл не будет указан иной DC -->
    <Window.DataContext>

        <!-- используя local (те пространство имен в ктором находитися MainWindowVM),  -->
        <!-- подключаем к текущему DC, MainWindowVM (вью модель сделаная для этого окна), теперь в Binding мы можем -->
        <!-- использовать публичные свойства нашей MainWindowVM -->
        <local:MainWindowVM />
    </Window.DataContext>
    <!-- добавили в окно ресурсы в данном случее класс команды CloseAppCmd-->
    <Window.Resources>
        <local:CloseAppCmd x:Key="CloseAppCmd"></local:CloseAppCmd>

    </Window.Resources>
    <Grid>
        <DockPanel>
            <Menu DockPanel.Dock="Top">

                <MenuItem Header="Файл">
                    <MenuItem Header="Выход"></MenuItem>
                </MenuItem>
                <MenuItem Header="Помощь"></MenuItem>
                <MenuItem Command="{Binding ChangeTab}" CommandParameter="-1">
                    <MenuItem.Header>
                        <fa:ImageAwesome Height="12" Icon="Regular_ArrowAltCircleLeft" />
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Command="{Binding ChangeTab}" CommandParameter="+1">
                    <MenuItem.Header>
                        <fa:ImageAwesome Height="12" Icon="Regular_ArrowAltCircleRight" />
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Header="{Binding SelectedPageIndex}">

                </MenuItem>
            </Menu>

            <StatusBar DockPanel.Dock="Bottom">
                <StatusBarItem MinWidth="100">
                    <TextBlock Text="{Binding Title}" />
                </StatusBarItem>
                <StatusBarItem>
                    <ProgressBar Width="100" Height="15" Value="{Binding Status}"></ProgressBar>
                </StatusBarItem>
                <StatusBarItem>
                    <Slider Width="300" Value="{Binding  Status}" Maximum="100" TickFrequency="10"
                            TickPlacement="TopLeft" IsSnapToTickEnabled="True" />

                </StatusBarItem>
            </StatusBar>
            <!-- по сути это список а TabItem это элменты списка -->
            <TabControl SelectedIndex="{Binding SelectedPageIndex}">
                <TabItem HorizontalAlignment="Center">
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal">
                            <fa:ImageAwesome Icon="Regular_Bell" Height="10" />
                        </StackPanel>
                    </TabItem.Header>
                    <Grid ShowGridLines="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="65*" />
                            <RowDefinition Height="325*" />
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150*" />
                            <ColumnDefinition Width="150*" />
                        </Grid.ColumnDefinitions>

                        <!-- через Binding подключаем свойство Title из MainWindowVM, UpdateSourceTrigger выставляем
                                мгновенное обновление всех привязанных к свойству Title примеников-->
                        <UniformGrid>
                            <TextBox FontSize="20"
                                     Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" />

                            <Button Command="{StaticResource CloseAppCmd}">
                                <Button.Content>
                                    <StackPanel>
                                        <fa:ImageAwesome Icon="Brands_Aws" Height="10" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <!-- привязка команды к кнопе через Binding -->
                            <Button Command="{Binding CloseAppCmd}">
                                <Button.Content>Exit(cmd in VM)</Button.Content>
                            </Button>
                            <Button>
                                <Button.Content>(cmd in Styles)</Button.Content>
                                <Button.Style>
                                    <StaticResource ResourceKey="StyleCmdClose" />
                                </Button.Style>
                            </Button>
                            <Button>
                                <Button.Command>
                                    <local:CloseAppCmd />
                                </Button.Command>
                                <Button.Content>Exit(cmd in Class)</Button.Content>
                            </Button>
                        </UniformGrid>
                        <Rectangle Grid.Row="0" Grid.Column="2" Fill="Azure" Stroke="Coral">
                            <Rectangle.InputBindings>
                                <MouseBinding
                                    MouseAction="LeftClick" Command="{Binding CloseAppCmd}">
                                </MouseBinding>
                            </Rectangle.InputBindings>
                        </Rectangle>
                        <GridSplitter Grid.Column="0" Grid.RowSpan="2" Width="4"></GridSplitter>
                    </Grid>
                </TabItem>
                <TabItem Header="График">
                    <Grid>
                        <oxy:Plot>
                            <oxy:Plot.Axes>
                                <oxy:LinearAxis Position="Left" />
                                <oxy:LinearAxis Position="Bottom" />
                            </oxy:Plot.Axes>

                            <oxy:LineSeries Color="Red" ItemsSource="{Binding TestDataPoints}"
                                            DataFieldX="XValue" DataFieldY="YValue" />
                        </oxy:Plot>
                    </Grid>

                </TabItem>

                <TabItem Header="Студенты">
                    <Grid ShowGridLines="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="250"></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <GroupBox Header="Группы">
                            <!-- DisplayMemberPath отобразит указанное свойство элементов в ItemsSource в данном случае Group.Name  -->
                            <!-- SelectedItem привязывает свойство SelectGroup к текущей выыбранной группе-->
                            <ListBox ItemsSource="{Binding Groups}" DisplayMemberPath="Name"
                                     SelectedItem="{Binding SelectGroup}"  SelectedIndex="1">
                            </ListBox>
                        </GroupBox>
                        <!-- FallbackValue используется когда привязка не может вернуть значение, TargetNullValue если  -->
                        <!-- значние источника null вернет заданное значение в даном случае "грппа не выбрана" -->
                        <GroupBox
                            Header="{Binding SelectGroup.Name, 
                        FallbackValue='Группа не выбрана', TargetNullValue='Группа не выыбрана'}"
                            HeaderStringFormat="Студенты группы {0}" Grid.Column="1">
                            <!-- DataGrid какие виды колонок нужны какие параметрвы как каим видам их привязвать и тд 
                          кастомизироват ячейки, он оч быстрый-->

                            <!-- AutoGenerateColumns не позволяет датагриду самостоятьльно генериировть колнки  -->
                            <!-- HorizontalGridLinesBrush и verical настраивает цвет гор и верт линий разметки, Transparent безцветный режим -->
                            <!-- аналогично ему {x:Null} -->
                            <!-- GridLinesVisibility="Vertical" показывать только верт линии -->
                            <!-- AlternatingRowBackground задает цвет фона в чередующейся строках -->
                            <DataGrid ItemsSource="{Binding SelectGroup.Students}" AutoGenerateColumns="False"
                                      IsReadOnly="True" GridLinesVisibility="Vertical" VerticalGridLinesBrush="Blue" 
                                      AlternatingRowBackground="LightBlue">
                                <!-- тк к свойству ItemsSource текущего датаггрида привзяанаы студенты выбранной группы, то  -->
                                <!-- что является типом данных внутри датагрид -->
                                <DataGrid.Columns>
                                    <!--DataGridTextColumn универсальный и позволят отображать данные в текстовм представлении -->
                                    <!-- могут быть в том числ и численые данные, конвертация автоматическая -->

                                    <!-- Binding подразумеваеит к чему будет привзяка исходя из ItemsSource. Те Name в данном -->
                                    <!--контестке будет SelectGroup.Students.Name, проще говоря мы сейчас в контесте Students -->
                                    <DataGridTextColumn Header="Фамилия" Binding="{Binding Surname}" />
                                    <DataGridTextColumn Header="Имя" Binding="{Binding Name}" />
                                    <DataGridTextColumn Header="Отчество" Binding="{Binding Patronymic }" />
                                    
                                    <!-- StringFormat=dd.MM.yyy устанавливаем форматировние даты на стандартную русскую вида Дата.Месяц.Год -->
                                    <!-- <DataGridTextColumn Header="Дата Рождения" Binding="{Binding Birthday, StringFormat=dd.MM.yyy}" /> -->
                                    
                                    <!-- DataGridTemplateColumn позволяет полность сконфигуриировать строку самостоятельно -->
                                    <DataGridTemplateColumn Header="Дата рождения">
                                        <!-- CellTemplate создает собственный шаблон ячейки -->
                                        <DataGridTemplateColumn.CellTemplate>
                                            <!-- DataTemplate внутри него будет применена описаная нами разметка, чтобы нарисовать этот эл на экране -->
                                            <!-- DataType если указать тип то иде будет подсказывать, привязки к данным-->
                                            <DataTemplate DataType="local:Student">
                                               <!-- отобажает выпадающий календарь с датами -->
                                                <DatePicker SelectedDate="{Binding Birthday}"></DatePicker>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    
                                    <DataGridTextColumn Header="Рейтинг" Binding="{Binding Rating}" />
                                    
                                    <!-- Чтобы поднятся выше в конексте данных например на уровень где контестом данных является SelectGroup -->
                                    <!-- нужно использовать это, RelativeSource ={RelativeSource AncestorType=GroupBox}} -->
                                    <!-- что поднимет нас к контесту данныых групбокса/датагрида котрым и является SelectGroup(контекстом даных всмысле)-->
                                    <DataGridTextColumn Header="Группа"
                                                        Binding="{Binding DataContext.SelectGroup.Name, 
                                                        RelativeSource = {RelativeSource AncestorType=DataGrid}}" />
                                    
                                    <!-- а так мы поднимемся на уровень ока чтобы получить Status из контекста данных окна -->
                                    <DataGridTextColumn Header="Уровень"
                                                        Binding="{Binding DataContext.Status, 
                                                        RelativeSource={RelativeSource AncestorType=Window}}"/>
                                    <DataGridTextColumn Header="Описание" Binding="{Binding Description}" Width="*"></DataGridTextColumn>
                                </DataGrid.Columns>

                            </DataGrid>
                        </GroupBox>
                    </Grid>
                </TabItem>
            </TabControl>
        </DockPanel>


    </Grid>
</Window>