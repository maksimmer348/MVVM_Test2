<!-- через Binding подключаем свойство Title из MainWindowVM -->
<Window x:Class="MVVM_Test2.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MVVM_Test2"
        xmlns:fa="http://schemas.fontawesome.com/icons/"
        xmlns:oxy="http://oxyplot.org/wpf"
        xmlns:system="clr-namespace:System;assembly=System.Runtime"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="450" Width="1000">

    <!-- указываем DC для всего окна, все визуальные эл будут иметь тот же DC если внутри эл не будет указан иной DC -->
    <Window.DataContext>

        <!-- используя local (те пространство имен в ктором находитися MainWindowVM),  -->
        <!-- подключаем к текущему DC, MainWindowVM (вью модель сделаная для этого окна), теперь в Binding мы можем -->
        <!-- использовать публичные свойства нашей MainWindowVM -->
        <local:MainWindowVM />
    </Window.DataContext>
    <!-- добавили в окно ресурсы в данном случее класс команды CloseAppCmd-->
    <Window.Resources>
        <local:CloseAppCmd x:Key="CloseAppCmd"></local:CloseAppCmd>

    </Window.Resources>
    <Grid>
        <DockPanel>
            <Menu DockPanel.Dock="Top">

                <MenuItem Header="Файл">
                    <MenuItem Header="Выход"></MenuItem>
                </MenuItem>
                <MenuItem Header="Помощь"></MenuItem>
                <MenuItem Command="{Binding ChangeTab}" CommandParameter="-1">
                    <MenuItem.Header>
                        <fa:ImageAwesome Height="12" Icon="Regular_ArrowAltCircleLeft" />
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Command="{Binding ChangeTab}" CommandParameter="+1">
                    <MenuItem.Header>
                        <fa:ImageAwesome Height="12" Icon="Regular_ArrowAltCircleRight" />
                    </MenuItem.Header>
                </MenuItem>

                <MenuItem Header="{Binding SelectedPageIndex}">

                </MenuItem>
                <!-- <MenuItem Header="{Binding RelativeSource={RelativeSource ={x:Name ListView}}, Path=Items.Count, Mode=OneWay}"/> -->
            </Menu>

            <StatusBar DockPanel.Dock="Bottom">
                <StatusBarItem MinWidth="100">
                    <TextBlock Text="{Binding Title}" />
                </StatusBarItem>
                <StatusBarItem>
                    <ProgressBar Width="100" Height="15" Value="{Binding Status}"></ProgressBar>
                </StatusBarItem>
                <StatusBarItem>
                    <Slider Width="300" Value="{Binding  Status}" Maximum="100" TickFrequency="10"
                            TickPlacement="TopLeft" IsSnapToTickEnabled="True" />

                </StatusBarItem>
            </StatusBar>
            <!-- по сути это список а TabItem это элменты списка -->
            <TabControl SelectedIndex="{Binding SelectedPageIndex}">
                <TabItem HorizontalAlignment="Center" Visibility="Collapsed">
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal">
                            <fa:ImageAwesome Icon="Regular_Bell" Height="10" />
                        </StackPanel>
                    </TabItem.Header>
                    <Grid ShowGridLines="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="65*" />
                            <RowDefinition Height="325*" />
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150*" />
                            <ColumnDefinition Width="150*" />
                        </Grid.ColumnDefinitions>

                        <!-- через Binding подключаем свойство Title из MainWindowVM, UpdateSourceTrigger выставляем
                                мгновенное обновление всех привязанных к свойству Title примеников-->
                        <UniformGrid>
                            <TextBox FontSize="20"
                                     Text="{Binding Title, UpdateSourceTrigger=PropertyChanged}" />

                            <Button Command="{StaticResource CloseAppCmd}">
                                <Button.Content>
                                    <StackPanel>
                                        <fa:ImageAwesome Icon="Brands_Aws" Height="10" />
                                    </StackPanel>
                                </Button.Content>
                            </Button>
                            <!-- привязка команды к кнопе через Binding -->
                            <Button Command="{Binding CloseAppCmd}">
                                <Button.Content>Exit(cmd in VM)</Button.Content>
                            </Button>
                            <Button>
                                <Button.Content>(cmd in Styles)</Button.Content>
                                <Button.Style>
                                    <StaticResource ResourceKey="StyleCmdClose" />
                                </Button.Style>
                            </Button>
                            <Button>
                                <Button.Command>
                                    <local:CloseAppCmd />
                                </Button.Command>
                                <Button.Content>Exit(cmd in Class)</Button.Content>
                            </Button>
                        </UniformGrid>
                        <Rectangle Grid.Row="0" Grid.Column="2" Fill="Azure" Stroke="Green">
                            <Rectangle.InputBindings>
                                <MouseBinding
                                    MouseAction="LeftClick" Command="{Binding CloseAppCmd}">
                                </MouseBinding>
                            </Rectangle.InputBindings>
                        </Rectangle>
                        <GridSplitter Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Width="4"></GridSplitter>
                    </Grid>
                </TabItem>
                <TabItem Header="График" Visibility="Collapsed">
                    <Grid>
                        <oxy:Plot>
                            <oxy:Plot.Axes>
                                <oxy:LinearAxis Position="Left" />
                                <oxy:LinearAxis Position="Bottom" />
                            </oxy:Plot.Axes>

                            <oxy:LineSeries Color="Navy" ItemsSource="{Binding TestDataPoints}"
                                            DataFieldX="XValue" DataFieldY="YValue" />
                        </oxy:Plot>
                    </Grid>

                </TabItem>

                <TabItem Header="Студенты">
                    <Grid ShowGridLines="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="250"></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <GroupBox Header="Группы">
                            <DockPanel>
                                <!-- Rows="1" означает что все эл в этой панели будут разсполжеен горзионтально и им будет -->
                                <!-- задана оддиноаковая ширина -->
                                <UniformGrid DockPanel.Dock="Bottom" Rows="1">
                                    <Button Content="+" Margin="3" Command="{Binding CreateNewGroupCmd}" />
                                    <Button Content="-" Margin="3" Command="{Binding DeleteGroupCmd}"
                                            CommandParameter="{Binding SelectGroup}" />
                                </UniformGrid>

                                <!-- DisplayMemberPath отобразит указанное свойство элементов в ItemsSource в данном случае Group.Name  -->
                                <!-- SelectedItem привязывает свойство SelectGroup к текущей выыбранной группе-->
                                <!-- <ListBox ItemsSource="{Binding Groups}" DisplayMemberPath="Name" -->
                                <!--          SelectedItem="{Binding SelectGroup}" SelectedIndex="1"> -->
                                <!-- </ListBox> -->

                                <!-- для однотипных эл списка можно применить следующию конструкциюю -->
                                <ListBox DockPanel.Dock="Top" ItemsSource="{Binding Groups}"
                                         SelectedItem="{Binding SelectGroup}">
                                    <!-- ItemTemplate задает шаблон DataTemplate для каждого из эл списка -->
                                    <ListBox.ItemTemplate>
                                        <DataTemplate DataType="local:Group">
                                            <StackPanel Orientation="Horizontal">
                                                <!-- демонстрирует Name для каждой Group -->
                                                <TextBlock Text="{Binding Name}" />
                                                <!-- демонстрирует количество Students для каждой Group -->
                                                <TextBlock Text="{Binding Students.Count, StringFormat={} [{0}]}" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>

                            </DockPanel>
                        </GroupBox>
                        <!-- FallbackValue используется когда привязка не может вернуть значение, TargetNullValue если  -->
                        <!-- значние источника null вернет заданное значение в даном случае "грппа не выбрана" -->
                        <GroupBox
                            Header="{Binding SelectGroup.Name, 
                        FallbackValue='Группа не выбрана', TargetNullValue='Группа не выыбрана'}"
                            HeaderStringFormat="Студенты группы {0}" Grid.Column="1">

                            <DockPanel>
                                <!-- DataGrid какие виды колонок нужны какие параметрвы как каим видам их привязвать и тд  -->
                                <!-- кастомизироват ячейки, он оч быстрый-->

                                <!-- AutoGenerateColumns не позволяет датагриду самостоятьльно генериировть колнки  -->
                                <!-- HorizontalGridLinesBrush и verical настраивает цвет гор и верт линий разметки, Transparent безцветный режим -->
                                <!-- аналогично ему {x:Null} -->
                                <!-- GridLinesVisibility="Vertical" показывать только верт линии -->
                                <!-- AlternatingRowBackground задает цвет фона в чередующейся строках -->

                                <DataGrid ItemsSource="{Binding SelectGroup.Students}" AutoGenerateColumns="False"
                                          CanUserDeleteRows="False" CanUserAddRows="False"
                                          GridLinesVisibility="Vertical"
                                          VerticalGridLinesBrush="Blue"
                                          AlternatingRowBackground="LightBlue">
                                    <!-- тк к свойству ItemsSource текущего датаггрида привзяанаы студенты выбранной группы, то  -->
                                    <!-- что является типом данных внутри датагрид -->
                                    <DataGrid.Columns>
                                        <!--DataGridTextColumn универсальный и позволят отображать данные в текстовм представлении -->
                                        <!-- могут быть в том числ и численые данные, конвертация автоматическая -->

                                        <!-- Binding подразумеваеит к чему будет привзяка исходя из ItemsSource. Те Name в данном -->
                                        <!--контестке будет SelectGroup.Students.Name, проще говоря мы сейчас в контесте Students -->
                                        <DataGridTextColumn Header="Фамилия" Binding="{Binding Surname}" />
                                        <DataGridTextColumn Header="Имя" Binding="{Binding Name}" />
                                        <DataGridTextColumn Header="Отчество" Binding="{Binding Patronymic }" />

                                        <!-- StringFormat=dd.MM.yyy устанавливаем форматировние даты на стандартную русскую вида Дата.Месяц.Год -->
                                        <!-- <DataGridTextColumn Header="Дата Рождения" Binding="{Binding Birthday, StringFormat=dd.MM.yyy}" /> -->

                                        <!-- DataGridTemplateColumn позволяет полность сконфигуриировать строку самостоятельно -->
                                        <DataGridTemplateColumn Header="Дата рождения">
                                            <!-- ~1~ CellTemplate создает собственный шаблон ячейки @1@ -->
                                            <!-- <DataGridTemplateColumn.CellTemplate> -->
                                            <!--     ~1~ DataTemplate внутри него будет применена описаная нами разметка, -->
                                            <!--  чтобы нарисовать этот эл на экране @1@ (те он описывает визуальную структуру обьекта)-->
                                            <!--     ~1~ DataType если указать тип то иде будет подсказывать, привязки к данным@1@ -->
                                            <!--     <DataTemplate DataType="local:Student"> -->
                                            <!--        ~1~ отобажает выпадающий календарь с датами @1@ -->
                                            <!--         <DatePicker SelectedDate="{Binding Birthday}"></DatePicker> -->
                                            <!--     </DataTemplate> -->
                                            <!-- </DataGridTemplateColumn.CellTemplate> -->

                                            <!-- так же можно настроить вид колонок для чтения и для радактиирования по разному -->

                                            <!-- для чтения будет отображатся в виде текстблока -->
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <TextBlock Text="{Binding Birthday, StringFormat=dd.MM.yyyy}" />
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>

                                            <!-- для редактривания будет отбражстся в виде SelectedDate -->
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <DatePicker SelectedDate="{Binding Birthday}"></DatePicker>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>

                                        </DataGridTemplateColumn>

                                        <DataGridTextColumn Header="Рейтинг" Binding="{Binding Rating}" />

                                        <!-- Чтобы поднятся выше в конексте данных например на уровень где контестом данных является SelectGroup -->
                                        <!-- нужно использовать это, RelativeSource ={RelativeSource AncestorType=GroupBox}} -->
                                        <!-- что поднимет нас к контесту данныых групбокса/датагрида котрым и является SelectGroup(контекстом даных всмысле)-->
                                        <DataGridTextColumn Header="Группа"
                                                            Binding="{Binding DataContext.SelectGroup.Name, 
                                                        RelativeSource = {RelativeSource AncestorType=DataGrid}}" />

                                        <!-- а так мы поднимемся на уровень ока чтобы получить Status из контекста данных окна -->
                                        <DataGridTextColumn Header="Уровень"
                                                            Binding="{Binding DataContext.Status, 
                                                        RelativeSource={RelativeSource AncestorType=Window}}" />
                                        <DataGridTemplateColumn Header="Описание" Width="*">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <TextBlock Text="{Binding Description}" />
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>

                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <TextBox Text="{Binding Description}"></TextBox>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                </DataGrid>

                            </DockPanel>
                        </GroupBox>
                    </Grid>
                </TabItem>

                <TabItem Header="Студенты и поиск">
                    <Grid ShowGridLines="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="250"></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <GroupBox Header="Группы">
                            <DockPanel>
                                <DockPanel.Resources>
                                    <!-- CollectionViewSource предназначен для решениия 3 задач, фильтрации, сортировки, группировки данных -->
                                    <!-- в виде визуальнх групп Source с чем будем работать,  -->
                                    <CollectionViewSource x:Key="GroupsCollection" Source="{Binding Groups}"
                                                          Filter="GroupsCollection_OnFilter">

                                    </CollectionViewSource>
                                </DockPanel.Resources>
                                <!-- фильрация с использованием разметки -->
                                <DockPanel DockPanel.Dock="Top">
                                    <fa:ImageAwesome Height="12" Icon="Solid_Search" Margin="0,3,3,3" />
                                    
                                    <!-- TextChanged перхватит событие измения текста и заставить сработать CollectionViewSource чтобы -->
                                    <!-- он выполнили фльтрацию эл , для этогго создаем обработчик события OnGroupsFilterTextChanged-->
                                    <TextBox Margin="0,3,0,3" Name="GroupSearch" TextChanged="OnGroupsFilterTextChanged"/>
                                </DockPanel>
                                <!-- Rows="1" означает что все эл в этой панели будут разсполжеен горзионтально и им будет -->
                                <!-- задана оддиноаковая ширина -->
                                <UniformGrid DockPanel.Dock="Bottom" Rows="1">
                                    <Button Content="+" Margin="3" Command="{Binding CreateNewGroupCmd}" />
                                    <Button Content="-" Margin="3" Command="{Binding DeleteGroupCmd}"
                                            CommandParameter="{Binding SelectGroup}" />
                                </UniformGrid>

                                <!-- изменим привязку ItemsSource с Binding Group на {Binding Source= {StaticResource GroupsCollection} -->
                                <!-- в даном случае это посредниик между источником данных и визуальным предсатвлением -->

                                <ListBox DockPanel.Dock="Top"
                                         ItemsSource="{Binding Source= {StaticResource GroupsCollection}}"
                                         SelectedItem="{Binding SelectGroup}">
                                    <!-- ItemTemplate задает шаблон DataTemplate для каждого из эл списка -->
                                    <ListBox.ItemTemplate>
                                        <DataTemplate DataType="local:Group">
                                            <StackPanel Orientation="Horizontal">
                                                <!-- демонстрирует Name для каждой Group -->
                                                <TextBlock Text="{Binding Name}" />
                                                <!-- демонстрирует количество Students для каждой Group -->
                                                <TextBlock Text="{Binding Students.Count, StringFormat={} [{0}]}" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>

                            </DockPanel>
                        </GroupBox>
                        <!-- FallbackValue используется когда привязка не может вернуть значение, TargetNullValue если  -->
                        <!-- значние источника null вернет заданное значение в даном случае "грппа не выбрана" -->
                        <GroupBox
                            Header="{Binding SelectGroup.Name, 
                        FallbackValue='Группа не выбрана', TargetNullValue='Группа не выыбрана'}"
                            HeaderStringFormat="Студенты группы {0}" Grid.Column="1">

                            <DockPanel>

                                <DockPanel DockPanel.Dock="Top">
                                    <fa:ImageAwesome Height="12" Icon="Solid_Search" Margin="0,3,3,3" />
                                    <!-- UpdateSourceTrigger=PropertyChanged будет изменять StudentFilterText, не только при поттере фокуса окна  -->
                                    <!-- но при любом изменении текста -->
                                    <TextBox Margin="0,3,0,3"  Text="{Binding StudentFilterText, 
                                    UpdateSourceTrigger=PropertyChanged}"/>
                                </DockPanel>

                                <!-- DataGrid какие виды колонок нужны какие параметрвы как каим видам их привязвать и тд  -->
                                <!-- кастомизироват ячейки, он оч быстрый-->

                                <!-- AutoGenerateColumns не позволяет датагриду самостоятьльно генериировть колнки  -->
                                <!-- HorizontalGridLinesBrush и verical настраивает цвет гор и верт линий разметки, Transparent безцветный режим -->
                                <!-- аналогично ему {x:Null} -->
                                <!-- GridLinesVisibility="Vertical" показывать только верт линии -->
                                <!-- AlternatingRowBackground задает цвет фона в чередующейся строках -->

                                <DataGrid ItemsSource="{Binding SelectedGroupStudents}" AutoGenerateColumns="False"
                                          CanUserDeleteRows="False" CanUserAddRows="False"
                                          GridLinesVisibility="Vertical"
                                          VerticalGridLinesBrush="Blue"
                                          AlternatingRowBackground="LightBlue">
                                    <DataGrid.GroupStyle>
                                        <GroupStyle/>
                                    </DataGrid.GroupStyle>
                                    <!-- тк к свойству ItemsSource текущего датаггрида привзяанаы студенты выбранной группы, то  -->
                                    <!-- что является типом данных внутри датагрид -->
                                    <DataGrid.Columns>
                                        <!--DataGridTextColumn универсальный и позволят отображать данные в текстовм представлении -->
                                        <!-- могут быть в том числ и численые данные, конвертация автоматическая -->

                                        <!-- Binding подразумеваеит к чему будет привзяка исходя из ItemsSource. Те Name в данном -->
                                        <!--контестке будет SelectGroup.Students.Name, проще говоря мы сейчас в контесте Students -->
                                        <DataGridTextColumn Header="Фамилия" Binding="{Binding Surname}" />
                                        <DataGridTextColumn Header="Имя" Binding="{Binding Name}" />
                                        <DataGridTextColumn Header="Отчество" Binding="{Binding Patronymic }" />

                                        <!-- StringFormat=dd.MM.yyy устанавливаем форматировние даты на стандартную русскую вида Дата.Месяц.Год -->
                                        <!-- <DataGridTextColumn Header="Дата Рождения" Binding="{Binding Birthday, StringFormat=dd.MM.yyy}" /> -->

                                        <!-- DataGridTemplateColumn позволяет полность сконфигуриировать строку самостоятельно -->
                                        <DataGridTemplateColumn Header="Дата рождения">
                                            <!-- ~1~ CellTemplate создает собственный шаблон ячейки @1@ -->
                                            <!-- <DataGridTemplateColumn.CellTemplate> -->
                                            <!--     ~1~ DataTemplate внутри него будет применена описаная нами разметка, -->
                                            <!--  чтобы нарисовать этот эл на экране @1@ (те он описывает визуальную структуру обьекта)-->
                                            <!--     ~1~ DataType если указать тип то иде будет подсказывать, привязки к данным@1@ -->
                                            <!--     <DataTemplate DataType="local:Student"> -->
                                            <!--        ~1~ отобажает выпадающий календарь с датами @1@ -->
                                            <!--         <DatePicker SelectedDate="{Binding Birthday}"></DatePicker> -->
                                            <!--     </DataTemplate> -->
                                            <!-- </DataGridTemplateColumn.CellTemplate> -->

                                            <!-- так же можно настроить вид колонок для чтения и для радактиирования по разному -->

                                            <!-- для чтения будет отображатся в виде текстблока -->
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <TextBlock Text="{Binding Birthday, StringFormat=dd.MM.yyyy}" />
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>

                                            <!-- для редактривания будет отбражстся в виде SelectedDate -->
                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <DatePicker SelectedDate="{Binding Birthday}"></DatePicker>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>

                                        </DataGridTemplateColumn>

                                        <DataGridTextColumn Header="Рейтинг" Binding="{Binding Rating}" />

                                        <!-- Чтобы поднятся выше в конексте данных например на уровень где контестом данных является SelectGroup -->
                                        <!-- нужно использовать это, RelativeSource ={RelativeSource AncestorType=GroupBox}} -->
                                        <!-- что поднимет нас к контесту данныых групбокса/датагрида котрым и является SelectGroup(контекстом даных всмысле)-->
                                        <DataGridTextColumn Header="Группа"
                                                            Binding="{Binding DataContext.SelectGroup.Name, 
                                                        RelativeSource = {RelativeSource AncestorType=DataGrid}}" />

                                        <!-- а так мы поднимемся на уровень ока чтобы получить Status из контекста данных окна -->
                                        <DataGridTextColumn Header="Уровень"
                                                            Binding="{Binding DataContext.Status, 
                                                        RelativeSource={RelativeSource AncestorType=Window}}" />
                                        <DataGridTemplateColumn Header="Описание" Width="*">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <TextBlock Text="{Binding Description}" />
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>

                                            <DataGridTemplateColumn.CellEditingTemplate>
                                                <DataTemplate DataType="local:Student">
                                                    <TextBox Text="{Binding Description}"></TextBox>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellEditingTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                </DataGrid>

                            </DockPanel>
                        </GroupBox>
                    </Grid>
                </TabItem>

                <TabItem Header="Разнородные данные" Visibility="Collapsed">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="250" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <GroupBox>

                            <!-- при использтвании ресурсов нельзя использовать такие штуки как ItemTemplate например тк -->
                            <!-- они переопределяют отбражаемые значения по своему те исользует ToString к каждому эл -->

                            <!-- DataTemplate DataType="{x:Type local:Group}" позволяет использовать заданные свойсвта классов из -->
                            <!-- списка разнордных элментов в данном случае если встреится эл Group то всеми дочерними элментами Grid -->
                            <!-- будет отображено Group.Name вместо применения ToString по умолчанию-->
                            <GroupBox.Resources>

                                <DataTemplate DataType="{x:Type local:Group}">
                                    <TextBlock Text="{Binding Name , StringFormat=Группа {0}}" />
                                </DataTemplate>

                                <!-- аналогично пример с Group в случае эл типа Student будет покзаано Student.Name вметсо ToString -->
                                <DataTemplate DataType="{x:Type local:Student}">
                                    <TextBlock Text="{Binding Name, StringFormat=Студент {0}}" />
                                </DataTemplate>

                                <DataTemplate DataType="{x:Type system:String}">
                                    <!-- TextBlock можно развернуть и компоновать след способом -->
                                    <!-- Run задает стиль внутри дочернего эл в данном случае это текст внутри текстблока-->
                                    <TextBlock Text="{Binding StringFormat='{}{0} '}">
                                        <Run Foreground="Brown" FontWeight="Bold"> Строка: </Run>
                                        <TextBlock Text="{Binding StringFormat={} {0}}"></TextBlock>
                                    </TextBlock>
                                </DataTemplate>

                                <DataTemplate DataType="{x:Type system:Int32}">
                                    <!-- TextBlock можно развернуть и компоновать след способом -->
                                    <!-- Run задает стиль внутри дочернего эл -->
                                    <TextBlock Text="{Binding }">
                                        <Run Foreground="Blue" FontWeight="Regular"> Число:  </Run>
                                        <TextBlock Text="{Binding  StringFormat={} {0}}"></TextBlock>
                                    </TextBlock>
                                </DataTemplate>

                            </GroupBox.Resources>


                            <GroupBox.Header>
                                <TextBlock Text="Элементы" />
                            </GroupBox.Header>

                            <!-- добявляем в ItemsSource список разнородных эл, SelectedItem будет установлен в свойство SelectedCompositeValue -->
                            <!-- тк ListBox не знает как отбражать даные он просто вызывает у всех обьектов в себя добавленных ToString -->
                            <ListBox ItemsSource="{Binding CompositeCollection}"
                                     SelectedItem="{Binding SelectedCompositeValue}">
                                <!-- ~1~ItemTemplate конкретизиурет как будет отбражатся конкретные типы данных @1@ -->
                                <!-- <ListBox.ItemTemplate> -->
                                <!--     ~1~ DataTemplate внутри него будет применена описаная нами разметка, @1@ -->
                                <!--     ~1~ чтобы нарисовать этот эл на экране (те он описывает визуальную структуру обьекта)@1@ -->
                                <!--     <DataTemplate> -->
                                <!--         ~1~ описываем как надо визуализировать наши обоьекты @1@ -->
                                <!--         <TextBlock Text="{Binding  }" /> -->
                                <!--     </DataTemplate> -->
                                <!-- </ListBox.ItemTemplate> -->
                            </ListBox>
                        </GroupBox>

                        <GroupBox Grid.Column="1">
                            <GroupBox.Resources>
                                <DataTemplate DataType="{x:Type system:Int32}">
                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="30"
                                               Foreground="Aqua" Text="{Binding StringFormat=Число: {0}}">
                                    </TextBlock>
                                </DataTemplate>
                            </GroupBox.Resources>

                            <GroupBox.Header>
                                <TextBlock Text="Выбарнный элемент" />
                            </GroupBox.Header>

                            <!--ContentControl с его помощьюю теперь при выборе соотвествующего эл SelectedCompositeValue в групбоксе будут -->
                            <!-- отбражатся их имена тк ContentControl не знает как отбражать даные он просто вызывает у всех обьектов в себя  -->
                            <!-- добавленных ToString (Student.ToString(), елси переопредеить это у студента можно полуиччить другое значение)-->
                            <ContentControl Content="{Binding SelectedCompositeValue}">
                            </ContentControl>
                        </GroupBox>
                    </Grid>
                </TabItem>
            </TabControl>
        </DockPanel>


    </Grid>
</Window>